<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 960 540" width="960" height="540" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><rect x="0" y="0" width="960" height="540" fill="#151521"/><g fill="#1e1e2d"><circle r="13" cx="375" cy="427"/><circle r="1" cx="158" cy="220"/><circle r="7" cx="54" cy="165"/><circle r="10" cx="832" cy="455"/><circle r="1" cx="628" cy="57"/><circle r="4" cx="770" cy="154"/><circle r="5" cx="647" cy="170"/><circle r="1" cx="530" cy="161"/><circle r="10" cx="602" cy="384"/><circle r="8" cx="139" cy="513"/><circle r="7" cx="84" cy="148"/><circle r="4" cx="452" cy="386"/><circle r="10" cx="9" cy="7"/><circle r="2" cx="936" cy="487"/><circle r="1" cx="131" cy="397"/><circle r="6" cx="188" cy="271"/><circle r="8" cx="619" cy="297"/><circle r="1" cx="266" cy="378"/><circle r="3" cx="183" cy="522"/><circle r="8" cx="444" cy="90"/><circle r="0" cx="901" cy="399"/><circle r="11" cx="703" cy="16"/><circle r="6" cx="706" cy="67"/><circle r="1" cx="827" cy="377"/><circle r="0" cx="149" cy="176"/><circle r="2" cx="235" cy="257"/><circle r="3" cx="278" cy="4"/><circle r="10" cx="921" cy="345"/><circle r="5" cx="846" cy="420"/><circle r="9" cx="828" cy="185"/><circle r="1" cx="907" cy="51"/><circle r="7" cx="256" cy="195"/><circle r="8" cx="331" cy="37"/><circle r="1" cx="955" cy="135"/><circle r="3" cx="87" cy="455"/><circle r="4" cx="483" cy="75"/><circle r="1" cx="568" cy="353"/><circle r="4" cx="203" cy="18"/><circle r="7" cx="555" cy="498"/><circle r="9" cx="294" cy="438"/><circle r="8" cx="298" cy="60"/><circle r="6" cx="934" cy="242"/><circle r="7" cx="601" cy="236"/><circle r="5" cx="469" cy="11"/><circle r="2" cx="415" cy="382"/><circle r="11" cx="464" cy="503"/><circle r="6" cx="132" cy="17"/><circle r="5" cx="773" cy="181"/><circle r="5" cx="168" cy="443"/><circle r="11" cx="400" cy="4"/><circle r="5" cx="66" cy="493"/><circle r="7" cx="409" cy="175"/><circle r="2" cx="225" cy="31"/><circle r="4" cx="101" cy="308"/><circle r="6" cx="271" cy="520"/><circle r="3" cx="422" cy="69"/><circle r="1" cx="676" cy="161"/><circle r="7" cx="487" cy="485"/><circle r="5" cx="618" cy="141"/><circle r="10" cx="378" cy="302"/><circle r="4" cx="748" cy="473"/></g></svg>