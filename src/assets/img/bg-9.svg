<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 960 540" width="960" height="540" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M0 33L17.8 34C35.7 35 71.3 37 106.8 40.7C142.3 44.3 177.7 49.7 213.2 53.2C248.7 56.7 284.3 58.3 320 59.2C355.7 60 391.3 60 426.8 58.3C462.3 56.7 497.7 53.3 533.2 54.3C568.7 55.3 604.3 60.7 640 60.7C675.7 60.7 711.3 55.3 746.8 53.5C782.3 51.7 817.7 53.3 853.2 50.5C888.7 47.7 924.3 40.3 942.2 36.7L960 33L960 0L942.2 0C924.3 0 888.7 0 853.2 0C817.7 0 782.3 0 746.8 0C711.3 0 675.7 0 640 0C604.3 0 568.7 0 533.2 0C497.7 0 462.3 0 426.8 0C391.3 0 355.7 0 320 0C284.3 0 248.7 0 213.2 0C177.7 0 142.3 0 106.8 0C71.3 0 35.7 0 17.8 0L0 0Z" fill="#3d3d54"/><path d="M0 93L17.8 97.5C35.7 102 71.3 111 106.8 123.5C142.3 136 177.7 152 213.2 154.7C248.7 157.3 284.3 146.7 320 145.8C355.7 145 391.3 154 426.8 149.5C462.3 145 497.7 127 533.2 122.5C568.7 118 604.3 127 640 131.5C675.7 136 711.3 136 746.8 142.3C782.3 148.7 817.7 161.3 853.2 152.3C888.7 143.3 924.3 112.7 942.2 97.3L960 82L960 31L942.2 34.7C924.3 38.3 888.7 45.7 853.2 48.5C817.7 51.3 782.3 49.7 746.8 51.5C711.3 53.3 675.7 58.7 640 58.7C604.3 58.7 568.7 53.3 533.2 52.3C497.7 51.3 462.3 54.7 426.8 56.3C391.3 58 355.7 58 320 57.2C284.3 56.3 248.7 54.7 213.2 51.2C177.7 47.7 142.3 42.3 106.8 38.7C71.3 35 35.7 33 17.8 32L0 31Z" fill="#323247"/><path d="M0 136L17.8 140.5C35.7 145 71.3 154 106.8 163.8C142.3 173.7 177.7 184.3 213.2 188C248.7 191.7 284.3 188.3 320 191.2C355.7 194 391.3 203 426.8 197.5C462.3 192 497.7 172 533.2 168.3C568.7 164.7 604.3 177.3 640 182.8C675.7 188.3 711.3 186.7 746.8 188.5C782.3 190.3 817.7 195.7 853.2 187.5C888.7 179.3 924.3 157.7 942.2 146.8L960 136L960 80L942.2 95.3C924.3 110.7 888.7 141.3 853.2 150.3C817.7 159.3 782.3 146.7 746.8 140.3C711.3 134 675.7 134 640 129.5C604.3 125 568.7 116 533.2 120.5C497.7 125 462.3 143 426.8 147.5C391.3 152 355.7 143 320 143.8C284.3 144.7 248.7 155.3 213.2 152.7C177.7 150 142.3 134 106.8 121.5C71.3 109 35.7 100 17.8 95.5L0 91Z" fill="#28283a"/><path d="M0 271L17.8 271.8C35.7 272.7 71.3 274.3 106.8 287C142.3 299.7 177.7 323.3 213.2 337.8C248.7 352.3 284.3 357.7 320 348.7C355.7 339.7 391.3 316.3 426.8 314.5C462.3 312.7 497.7 332.3 533.2 332.3C568.7 332.3 604.3 312.7 640 298.3C675.7 284 711.3 275 746.8 283C782.3 291 817.7 316 853.2 324C888.7 332 924.3 323 942.2 318.5L960 314L960 134L942.2 144.8C924.3 155.7 888.7 177.3 853.2 185.5C817.7 193.7 782.3 188.3 746.8 186.5C711.3 184.7 675.7 186.3 640 180.8C604.3 175.3 568.7 162.7 533.2 166.3C497.7 170 462.3 190 426.8 195.5C391.3 201 355.7 192 320 189.2C284.3 186.3 248.7 189.7 213.2 186C177.7 182.3 142.3 171.7 106.8 161.8C71.3 152 35.7 143 17.8 138.5L0 134Z" fill="#1e1e2d"/><path d="M0 314L17.8 319.5C35.7 325 71.3 336 106.8 347.7C142.3 359.3 177.7 371.7 213.2 384.2C248.7 396.7 284.3 409.3 320 406.7C355.7 404 391.3 386 426.8 384.2C462.3 382.3 497.7 396.7 533.2 395.8C568.7 395 604.3 379 640 364.7C675.7 350.3 711.3 337.7 746.8 340.3C782.3 343 817.7 361 853.2 371.8C888.7 382.7 924.3 386.3 942.2 388.2L960 390L960 312L942.2 316.5C924.3 321 888.7 330 853.2 322C817.7 314 782.3 289 746.8 281C711.3 273 675.7 282 640 296.3C604.3 310.7 568.7 330.3 533.2 330.3C497.7 330.3 462.3 310.7 426.8 312.5C391.3 314.3 355.7 337.7 320 346.7C284.3 355.7 248.7 350.3 213.2 335.8C177.7 321.3 142.3 297.7 106.8 285C71.3 272.3 35.7 270.7 17.8 269.8L0 269Z" fill="#1c1c29"/><path d="M0 492L17.8 493.8C35.7 495.7 71.3 499.3 106.8 499.3C142.3 499.3 177.7 495.7 213.2 497.5C248.7 499.3 284.3 506.7 320 510.3C355.7 514 391.3 514 426.8 512.2C462.3 510.3 497.7 506.7 533.2 504C568.7 501.3 604.3 499.7 640 496.2C675.7 492.7 711.3 487.3 746.8 484.7C782.3 482 817.7 482 853.2 487.3C888.7 492.7 924.3 503.3 942.2 508.7L960 514L960 388L942.2 386.2C924.3 384.3 888.7 380.7 853.2 369.8C817.7 359 782.3 341 746.8 338.3C711.3 335.7 675.7 348.3 640 362.7C604.3 377 568.7 393 533.2 393.8C497.7 394.7 462.3 380.3 426.8 382.2C391.3 384 355.7 402 320 404.7C284.3 407.3 248.7 394.7 213.2 382.2C177.7 369.7 142.3 357.3 106.8 345.7C71.3 334 35.7 323 17.8 317.5L0 312Z" fill="#1a1a26"/><path d="M0 541L17.8 541C35.7 541 71.3 541 106.8 541C142.3 541 177.7 541 213.2 541C248.7 541 284.3 541 320 541C355.7 541 391.3 541 426.8 541C462.3 541 497.7 541 533.2 541C568.7 541 604.3 541 640 541C675.7 541 711.3 541 746.8 541C782.3 541 817.7 541 853.2 541C888.7 541 924.3 541 942.2 541L960 541L960 512L942.2 506.7C924.3 501.3 888.7 490.7 853.2 485.3C817.7 480 782.3 480 746.8 482.7C711.3 485.3 675.7 490.7 640 494.2C604.3 497.7 568.7 499.3 533.2 502C497.7 504.7 462.3 508.3 426.8 510.2C391.3 512 355.7 512 320 508.3C284.3 504.7 248.7 497.3 213.2 495.5C177.7 493.7 142.3 497.3 106.8 497.3C71.3 497.3 35.7 493.7 17.8 491.8L0 490Z" fill="#181822"/></svg>